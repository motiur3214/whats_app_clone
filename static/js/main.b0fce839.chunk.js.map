{"version":3,"sources":["firebase.js","components/Chats.js","StateProvider.js","components/Sidebar.js","components/ChatRoom.js","reducer.js","components/Login.js","components/ChatIntro.js","components/ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["database","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","authentication","auth","provider","GoogleAuthProvider","Chats","addChat","roomId","name","useState","avatars","setavatars","messages","setmessages","useEffect","Math","floor","random","collection","doc","orderBy","onSnapshot","snapshot","docs","map","id","data","onClick","chatName","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setrooms","user","getRooms","photoURL","IconButton","placeholder","type","room","ChatRoom","input","setinput","seed","setSeed","useParams","roomname","setroomname","messagesEndRef","useRef","scrollToBottom","current","scrollIntoView","Date","length","timestamp","toDate","toDateString","toLocaleTimeString","displayName","ref","onChange","event","target","required","preventDefault","FieldValue","serverTimestamp","actionTypes","state","action","console","log","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","alert","messege","ChatIntro","ErrorBoundary","props","hasError","info","this","setState","Component","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b0fce839.chunk.js","sourcesContent":["// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nimport firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDHyPqemBrlngiZwkcmZF58HEI5D3iUjTo\",\r\n    authDomain: \"whats-app-clone-78905.firebaseapp.com\",\r\n    projectId: \"whats-app-clone-78905\",\r\n    storageBucket: \"whats-app-clone-78905.appspot.com\",\r\n    messagingSenderId: \"217263856394\",\r\n    appId: \"1:217263856394:web:012ea2e057929e015d78f3\",\r\n    measurementId: \"G-GSELSTCEF9\"\r\n  };\r\nconst firebaseApp =firebase.initializeApp(firebaseConfig);\r\nconst database = firebaseApp.firestore();\r\nconst authentication=firebase.auth();\r\nconst provider =new firebase.auth.GoogleAuthProvider();\r\nexport{authentication,provider,database};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Chats.css\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport { database } from \"../firebase\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Chats({ addChat, roomId, name }) {\r\n  const [avatars, setavatars] = useState(\"\");\r\n  const [messages, setmessages] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setavatars(Math.floor(Math.random() * 5000));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (roomId) {\r\n      database\r\n        .collection(\"rooms\")\r\n        .doc(roomId)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"desc\")\r\n        .onSnapshot((snapshot) =>\r\n          setmessages(snapshot.docs.map((doc) =>\r\n           ({\r\n          id: doc.id,\r\n          data: doc.data(),\r\n        }))\r\n           \r\n           ));\r\n    }\r\n  }, [roomId]);\r\n\r\n  const addnewChat = () => {\r\n    const chatName = prompt(\"Enter A name\");\r\n\r\n    if (chatName) {\r\n      database.collection(\"rooms\").add({\r\n        name: chatName,\r\n      });\r\n    }\r\n  };\r\n\r\n  return !addChat ? (\r\n    <Link to={`/rooms/${roomId}`}>\r\n      <div className=\"chats\">\r\n        <Avatar src={`https://avatars.dicebear.com/api/human/${avatars}.svg`} />\r\n        <div className=\"chats_info\">\r\n          <h3>{name}</h3>\r\n          <p>{messages[0]?.data.message}</p>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  ) : (\r\n    <div onClick={addnewChat} className=\"chats\">\r\n      <h2>Add New Chat</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chats;\r\n","import React, { createContext, useReducer, useContext } from \"react\";\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Sidebar.css\";\r\nimport { Avatar, IconButton } from \"@material-ui/core\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport Chats from \"./Chats\";\r\nimport { database } from \"../firebase\";\r\nimport { useStateValue } from \"../StateProvider\";\r\nfunction Sidebar() {\r\n  const [rooms, setrooms] = useState([]);\r\n  const [{ user }] = useStateValue();\r\n\r\n  useEffect(() => {\r\n    const getRooms = database.collection(\"rooms\").onSnapshot((snapshot) =>\r\n      setrooms(\r\n        snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          data: doc.data(),\r\n        }))\r\n      )\r\n    );\r\n\r\n    return () => {\r\n      getRooms();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar_header\">\r\n        <Avatar src={user?.photoURL} />\r\n        <div className=\"sidebar_headerright\">\r\n           \r\n           <IconButton>\r\n          <DonutLargeIcon />\r\n          </IconButton>\r\n          \r\n          <IconButton>\r\n          <ChatIcon />\r\n          </IconButton>\r\n          \r\n          <IconButton>\r\n          <MoreVertIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebar_search\">\r\n        <div className=\"sidebar_search_component\">\r\n        <IconButton>\r\n          <SearchIcon />\r\n        </IconButton>\r\n          <input placeholder=\"Lets chat\" type=\"text\" />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"sidebar_chatsGroups\">\r\n        <Chats addChat />\r\n        {rooms.map((room) => (\r\n          <Chats key={room.id} roomId={room.id} name={room.data.name} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport firebase from \"firebase\";\r\nimport \"./ChatRoom.css\";\r\nimport { Avatar,IconButton } from \"@material-ui/core\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport AttachFileIcon from \"@material-ui/icons/AttachFile\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport InsertEmoticon from \"@material-ui/icons/SentimentVerySatisfied\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { database } from \"../firebase\";\r\nimport { useStateValue } from \"../StateProvider\";\r\nfunction ChatRoom() {\r\n  const [input, setinput] = useState(\"\");\r\n  const[seed,setSeed]=useState(\"\");\r\n  const { roomId } = useParams();\r\n  const [roomname, setroomname] = useState(\"\");\r\n  const [messages, setmessages] = useState([]);\r\n  const [{ user }, dispatch] = useStateValue();\r\n  const messagesEndRef = useRef(null);\r\n  \r\n  const scrollToBottom = () =>messagesEndRef.current.scrollIntoView();\r\n\r\n  useEffect(() => {\r\n    if (roomId) {\r\n     \r\n      database\r\n        .collection(\"rooms\")\r\n        .doc(roomId)\r\n        .onSnapshot((snapshot) => setroomname(snapshot.data().name));\r\n      database\r\n        .collection(\"rooms\")\r\n        .doc(roomId)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"asc\")\r\n        .onSnapshot((snapshot) =>\r\n          setmessages(snapshot.docs.map((doc) => ({\r\n            id: doc.id,\r\n            data: doc.data(),\r\n          })\r\n          ))\r\n        );\r\n        scrollToBottom();\r\n    \r\n      }\r\n  }, [roomId]);\r\n  useEffect(() => {\r\n    setSeed(Math.floor(Math.random()*5000));\r\n  },[roomId])\r\n\r\n \r\n\r\n  \r\n \r\nconst SendMessage = (event) => {\r\n    event.preventDefault();\r\n\r\n    database.collection(\"rooms\").doc(roomId).collection(\"messages\").add({\r\n      message: input,\r\n      name: user.displayName,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    });\r\n    setinput(\"\");\r\n    scrollToBottom();\r\n    \r\n  };\r\n\r\n  return (\r\n    <div className=\"chatroom\">\r\n      <div className=\"chatroom_header\">\r\n        <Avatar src={`https://avatars.dicebear.com/4.5/api/human/${seed}.svg`}/>\r\n        <div className=\"chat_info\">\r\n          <h3>{roomname}</h3>\r\n          <p>\r\n            last message{\" \"}\r\n            \r\n            { new Date(\r\n              messages[messages.length - 1]?.data.timestamp?.toDate()\r\n            ).toDateString()} {\" \"} \r\n            \r\n            {new Date(\r\n              messages[messages.length - 1]?.data.timestamp?.toDate()\r\n            ).toLocaleTimeString()}\r\n            \r\n          </p>\r\n        </div>\r\n        <div className=\"chatroom_header_inforight\">\r\n          <IconButton>\r\n          <SearchIcon />\r\n          </IconButton> \r\n          \r\n          <IconButton>\r\n          <AttachFileIcon />\r\n          </IconButton>\r\n          \r\n          <IconButton>\r\n          <MoreVertIcon />\r\n          </IconButton>\r\n       \r\n        </div>\r\n      </div>\r\n      <div className=\"chatroom_body\" id=\"chatroom_body\">\r\n        {\r\n         \r\n        messages.map((message) => (\r\n          \r\n          <p\r\n            className={`chatroom_message ${message.data.name === user.displayName && `chatroom_messagerecierver`}`} key={message.id}>\r\n            <span className=\"sender_name\">{message.data.name}</span>\r\n            {message.data.message}\r\n            <span className=\"sender_timestamp \">\r\n           \r\n              {new Date(message.data.timestamp?.toDate()).toLocaleTimeString()}\r\n            </span>\r\n          </p>\r\n        ))\r\n      }\r\n        \r\n        <div ref={messagesEndRef} className=\"scroll_to_bottom\"> hi</div>\r\n      </div>\r\n      <div className=\"chatroom_footer\">\r\n        <InsertEmoticon />\r\n        <form>\r\n          <input type=\"text\"\r\n            value={input}\r\n            onChange={(event) => setinput(event.target.value)}\r\n            placeholder=\"Type your message here\" required=\"required\"\r\n          />\r\n          <button onClick={SendMessage} type=\"submit\">\r\n            <SendIcon />\r\n          </button>\r\n        </form>\r\n        <MicIcon />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatRoom;\r\n","export const initialState = {\r\n  user: null,\r\n};\r\n\r\nexport const actionTypes = {\r\n  SET_USER: \"SET_USER\",\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  console.log(action);\r\n  switch (action.type) {\r\n    case actionTypes.SET_USER:\r\n      return {\r\n        ...state,\r\n        user: action.user,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\r\nimport \"./Login.css\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { authentication, provider } from \"../firebase\";\r\nimport { useStateValue } from \"../StateProvider\";\r\nimport { actionTypes } from \"../reducer\";\r\n\r\nconst Login =()=> {\r\n  const [{},dispatch]=useStateValue();\r\n\r\n\r\nconst signIn=()=>{\r\n\r\n  authentication\r\n    .signInWithPopup(provider)\r\n    .then((result)=>{\r\n      dispatch({\r\n        type:actionTypes.SET_USER,\r\n        user:result.user,\r\n      });\r\n    })\r\n    .catch(error=> alert(error.messege))  \r\n  };\r\n  return (\r\n      <div className=\"login\">\r\n      <div className=\"login_container\">\r\n         \r\n      <img src=\"https://gumlet.assettype.com/freepressjournal%2Fimport%2F2018%2F11%2FWhatsapp.jpg?auto=format%2Ccompress&format=webp&w=640&dpr=1.0\" alt=\"\" />\r\n     \r\n      <div className=\"login_text\">\r\n      <h1>Sign in to Whats app clone</h1>\r\n      </div>\r\n      <Button onClick={signIn}>Sign In With Google</Button>\r\n      </div>\r\n      </div>\r\n      )\r\n  }\r\n  \r\n  export default Login\r\n  ","import React from 'react';\r\nimport './ChatIntro.css';\r\nfunction ChatIntro() {\r\n    return (\r\n        <div className=\"chat_intro\">\r\n\r\n           <span> Cloned by Md. Motiur Rahman</span> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatIntro\r\n","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\nconstructor(props){\r\n\r\n    super(props);\r\n\r\n    this.state = {\r\n    hasError: false \r\n }\r\n}\r\n\r\ncomponentDidCatch(error,info){\r\nthis.setState({hasError: true})\r\n\r\n\r\n}\r\nrender(){\r\n\r\nif(this.state.hasError){\r\n\r\n return <h1> There is some error</h1>\r\n\r\n}\r\nreturn this.props.children\r\n\r\n}\r\n}\r\n\r\n   export default ErrorBoundary;\r\n\r\n\r\n","import React  from \"react\";\r\n\r\nimport \"./App.css\";\r\nimport Sidebar from \"./components/Sidebar\";\r\nimport ChatRoom from \"./components/ChatRoom\";\r\nimport { Switch, BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport Login from \"./components/Login\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport ChatIntro from \"./components/ChatIntro\"\r\n\r\nimport ErrorBoundary from \"./components/ErrorBoundary\";\r\nfunction App() {\r\n  const [{ user }] = useStateValue();\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {!user ? (\r\n        <Login />\r\n      ) : (\r\n        <div className=\"app_container\">\r\n          <ErrorBoundary>\r\n          <Router>\r\n            <Sidebar />\r\n            <Switch>\r\n              <Route path=\"/rooms/:roomId\">\r\n                <ChatRoom />\r\n              </Route>\r\n              <Route path=\"/\">\r\n            <ChatIntro />\r\n            </Route>\r\n            </Switch>\r\n          </Router>\r\n          </ErrorBoundary>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { StateProvider } from \"./StateProvider\";\r\nimport reducer, { initialState } from \"./reducer\";\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StateProvider initialState={initialState} reducer={reducer}>\r\n      <App />\r\n    </StateProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}